require('isomorphic-fetch')

class Client {
  constructor(options) {
    {{#parseBaseUri this}}
    {{#each this}}
    {{this}}
    {{/each}}
    {{/parseBaseUri}}
    {{#if endPoints}}
    this.endPoints = [{{#each endPoints}}'{{this}}',{{/each}}]
    {{/if}}

    this.dispatch = this.createDispatch(options.middlewares)
  }

  createDispatch(middlewares) {
    let dispatch = () => {
      throw new Error(
      'Dispatching while constructing your middleware is not allowed. ' +
        'Other middleware would not be applied to this dispatch.'
      );
    };
    const finalDispatch = request => {
      return fetch(request);
    };
    const chain = middlewares.map(middleware => middleware(dispatch));
    dispatch = this._compose(...chain)(finalDispatch);
  }

  _compose(...fns) {
    if (fns.length === 0)
      return arg => arg;

    if (fns.length === 1)
      return fns[0];

    return fns.reduce((a, b) => (...args) => a(b(...args)))
  }

  _buildQuery(parameters, queryParameters) {
    return queryParameters.map((queryParam) => {
      if (parameters[queryParam])
        return `${queryParam}=${parameters[queryParam]}`
    }).join('&')
  }

{{#each resources}}
  {{toUpperCase method}}_{{uniqueId}}(parameters = {}) {
    const headers = {}
    let path = '{{parentUrl}}{{relativeUri}}'
    {{#if queryParameters}}
    const queryParameters = [{{#each queryParameters}}'{{this.name}}',{{/each}}]
    {{/if}}
    {{#parseUri this }}
    {{#each this}}
    {{this}}
    {{/each}}
    {{/parseUri}}
    {{#parseQuery this }}
    {{#each this}}
    {{this}}
    {{/each}}
    {{/parseQuery}}
    {{#parseHeaders this }}
    {{#each this}}
    {{this}}
    {{/each}}
    {{/parseHeaders}}
    {{#parseBody this }}
    {{#each this}}
    {{this}}
    {{/each}}
    {{/parseBody}}
    const url = this.baseUri + path

    const request = { url, headers,{{#if body}} body,{{/if}} method: '{{toUpperCase method}}' }
    return this.dispatch(request)
  }

{{/each}}
}

exports = Client
